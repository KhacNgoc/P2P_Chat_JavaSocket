/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server;

import static Server.server.SERVER_PORT;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author khacngoc
 */
public class server extends javax.swing.JFrame {

    /**
     * Creates new form server
     */
    public final static int SERVER_PORT = 9999;
    private static ServerSocket serverSock;
    private static Socket clientSock = null;
    public static HashMap<String, Socket> listSocket;
    public static HashMap<String, String> listPort;
    ArrayList<String> ipClients = new ArrayList<String>();
    ArrayList<String> portClients = new ArrayList<String>();

    public server() {
        listPort = new HashMap();
        listSocket = new HashMap();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSer = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtSer.setColumns(20);
        txtSer.setRows(5);
        jScrollPane1.setViewportView(txtSer);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 25)); // NOI18N
        jLabel1.setText("SERVER");

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(239, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(231, 231, 231))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    class ServerStart extends Thread {

        @Override
        public void run() {
            try {
                serverSock = new ServerSocket(SERVER_PORT);
                txtSer.append("Server Started!!!\n");
                txtSer.append("Waiting clients connected!\n");
                while (true) {
                    clientSock = serverSock.accept();
                    txtSer.append("Accept " + clientSock + "\n");
                    MultiClient mul = new MultiClient(clientSock);
                    Thread t = new Thread(mul);
                    t.start();
                    txtSer.append(clientSock.getRemoteSocketAddress().toString() + "\n");
                    //System.out.println(listPort.size());
//                    listClient.put(mul.name, clientSock.getRemoteSocketAddress().toString());
//                    Iterator iter = (Iterator) listClient.keySet().iterator();
//                    while (iter.hasNext()) {
//                        Entry<String,String> entry = (Entry<String,String>) iter.next();
//                        System.out.println("key: " + entry.getKey());
//                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Thread s = new Thread(new ServerStart());
        s.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea txtSer;
    // End of variables declaration//GEN-END:variables
}

class MultiClient extends Thread {

    private Socket socket;
    DataInputStream in;
    DataOutputStream out;
    public static String name = null;
    public static String port = null;

    public MultiClient(Socket so) {
        this.socket = so;
        try {
            in = new DataInputStream(socket.getInputStream());
            out = new DataOutputStream(socket.getOutputStream());
        } catch (IOException ex) {
            Logger.getLogger(MultiClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sendClient(HashMap<String, Socket> list, String sms) throws IOException {
        Iterator itr1 = list.entrySet().iterator();
        while (itr1.hasNext()) {
            Map.Entry<String, Socket> entry = (Map.Entry<String, Socket>) itr1.next();
            DataOutputStream dataout = new DataOutputStream(entry.getValue().getOutputStream());
            dataout.writeUTF(sms);
            System.out.println("Key = " + entry.getKey()
                    + ", Value = " + entry.getValue());
        }
    }

    public void sendPortTo1(Socket sock, HashMap<String, String> listPort) throws IOException {
        String mess = null;
        Iterator itr1 = listPort.entrySet().iterator();
        DataOutputStream dataout = new DataOutputStream(sock.getOutputStream());
        while (itr1.hasNext()) {
            Map.Entry<String, String> entry = (Map.Entry<String, String>) itr1.next();
            mess = mess + entry.getKey() + ":" + entry.getValue() + ",";
            System.out.println("Key = " + entry.getKey()
                    + ", Value = " + entry.getValue());
        }
        dataout.writeUTF(mess);
    }

    public void sendPortToMore(HashMap<String, Socket> list, String port) throws IOException {
        Iterator itr1 = list.entrySet().iterator();
        while (itr1.hasNext()) {
            Map.Entry<String, Socket> entry = (Map.Entry<String, Socket>) itr1.next();
            DataOutputStream dataout = new DataOutputStream(entry.getValue().getOutputStream());
            dataout.writeUTF(port);
            System.out.println("Key = " + entry.getKey()
                    + ", Value = " + entry.getValue());
        }
    }

    public void sendUser(HashMap<String, Socket> listsock, HashMap<String, String> listPort) throws IOException {
        Iterator itr = listsock.entrySet().iterator();
        while (itr.hasNext()) {
            Map.Entry<String, Socket> entry = (Map.Entry<String, Socket>) itr.next();
            DataOutputStream dataout = new DataOutputStream(entry.getValue().getOutputStream());
            //dataout.writeUTF(port);
            String mess = "";
            Iterator itr1 = listPort.entrySet().iterator();
            while (itr1.hasNext()) {
                Map.Entry<String, String> entry1 = (Map.Entry<String, String>) itr1.next();
                mess = mess + entry1.getKey() + ":";
                System.out.println("Key = " + entry1.getKey()
                        + ", Value = " + entry1.getValue());
            }
            mess = mess + "online";
            System.out.println(mess);
            dataout.writeUTF(mess);
            System.out.println("Key = " + entry.getKey()
                    + ", Value = " + entry.getValue());
        }

//        String mess = "";
//        Iterator itr1 = listPort.entrySet().iterator();
//        DataOutputStream dataout = new DataOutputStream(sock.getOutputStream());
//        while(itr1.hasNext()) 
//        { 
//             Map.Entry<String, String> entry = (Map.Entry<String, String>) itr1.next();
//             mess = mess + entry.getKey() + ":";
//             System.out.println("Key = " + entry.getKey() +  
//                                 ", Value = " + entry.getValue()); 
//        }
//        mess = mess + "online";
//        System.out.println(mess);
//        dataout.writeUTF(mess);
    }

    public void getConnectP2p(Socket sock, String name, HashMap<String, String> listPort) throws IOException {
        String mess = null;
        Iterator itr1 = listPort.entrySet().iterator();
        DataOutputStream dataout = new DataOutputStream(sock.getOutputStream());
        while (itr1.hasNext()) {
            Map.Entry<String, String> entry = (Map.Entry<String, String>) itr1.next();
            if (entry.getKey().equals(name)) {
                dataout.writeUTF(entry.getValue() + ":connectp2p");
            }
            System.out.println("Key = " + entry.getKey()
                    + ", Value = " + entry.getValue());
        }
    }

    @Override
    public void run() {
        String mess;
        String[] m = new String[3];
        try {
            while ((mess = in.readUTF()) != null) {
                System.out.println(mess);
                m = mess.split(":");
                port = m[0];
                name = m[1];
                System.out.println(m[2]);
                if (m[2].equals("connect")) {
                    server.listPort.put(name, port);
                    server.listSocket.put(name, this.socket);
                    sendClient(server.listSocket, name + ":connected");
                    System.out.println("Name: " + name + ", Port: " + port);
                } else if (m[2].equals("send")) {
                    sendClient(server.listSocket, m[0] + ": " + m[1] + "\n");
                } else if (m[2].equals("wanttoconnect")) {
                    getConnectP2p(this.socket, m[1], server.listPort);
                }
                sendUser(server.listSocket, server.listPort);
            }
        } catch (IOException ex) {
            Logger.getLogger(MultiClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
